<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DroidGraph Discovering Android Malware by Analyzing Semantic Behavior</title>
    <link href="/2021/11/13/droidgraph/"/>
    <url>/2021/11/13/droidgraph/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​    由于智能手机的普及，手机恶意软件的数量急剧增加。由于智能手机被认定为私人财产，人们在没有意识到手机恶意软件威胁的情况下，储存了敏感数据。这一事实给了攻击者以智能手机为目标的巨大动机，而且事实上，移动恶意软件现在非常猖獗，特别是在最流行的移动平台Android上。</p><p>​    为了应对日益增长的Android恶意软件的威胁，已经提出了许多对策，但没有一个能够成为根本的解决方案。应对的主要困难是Android恶意软件变种的快速增长。根据赛门铁克的报告，从2012年到2013年，每个恶意软件家族的平均变异数量增加了50%以上，而同一时期的恶意软件家族数量记录了45%的下降。</p><p>​    这一趋势的主要原因是，<strong>Android恶意软件不断发展</strong>，使用了<strong>代码混淆</strong>或<strong>垃圾代码插入</strong>等逃避技术。攻击者使用该技术可以轻松构建新的恶意软件变体，这些变体使得现有的<em>基于二进制签名或已授予的权限、类名或包名等特征的移动恶意软件解决方案</em>，无法检测当前的Android恶意软件。</p><p>​    基于此，我们提出了一种基于语义行为分析的Android恶意软件检测机制<strong>DroidGraph</strong>。<strong>DroidGraph</strong>处理的是<strong>API调用</strong>，因为在Android平台中，<strong>API调用</strong>对于Android操作来说占据着重要的位置，而且每个<strong>API调用</strong>都有不同的语义含义。因此，分析Android  API调用可以让我们更容易地理解Android恶意软件的企图。我们将从APK文件中提取的<strong>API调用</strong>转换为<strong>层次行为图</strong>。这些图通过分解为<strong>APK层次结构</strong>，分别从<em>每个方法、类、包和应用程序级别的角度</em>表示语义意义。这种分层方法使我们避免了对重新包装的恶意软件的错误警报。在抽取行为图之后，我们选择图作为语义签名来检测未知的恶意软件变体，它们代表了恶意软件族的常见行为。</p><p>​    为了评估<strong>DroidGraph</strong>，我们使用了现实世界的数据，包括从<strong>Contagio手机网站</strong>收集的260个Android恶意软件，以及从谷歌游戏商店和其他Android市场收集的3623个良性应用程序。在一个实验中，DroidGraph仅使用<strong>40个语义特征</strong>就能达到87%的检测准确率。</p><h2 id="安卓恶意软件检测"><a href="#安卓恶意软件检测" class="headerlink" title="安卓恶意软件检测"></a>安卓恶意软件检测</h2><p>​    为了设计一个有效的缓解方案，首先我们需要对Android恶意软件及其现象有一个深刻的理解。在本节中，我们将描述近期Android恶意软件的两个主要现象，即<strong>重新包装和变质</strong>。</p><p>​    Android恶意软件用于应用重新包装的目的，以<strong>方便创建和分发</strong>。攻击者通过简单地将攻击模块添加到一个众所周知的应用程序中来构建诱饵应用程序，并将其上传到公开的Android市场，以引诱人们安装他们的传统应用程序。这意味着，当我们分析这种重新包装的恶意软件时，我们应该能够识别出哪个部分是攻击者的财产。</p><p>​    另一种需要考虑的现象是<strong>变质作用</strong>。众所周知，目前的Android恶意软件利用变形来避免现有的反移动恶意软件解决方案。为了完成这种变形，攻击者通常采用几种技术，如<strong>代码混淆、垃圾代码插入和API替换</strong>。因此，仅考虑Android恶意软件的外观可能会导致严重的误检。为此，我们需要分析Android恶意软件的语义，而不是它的外观。</p><h2 id="DroidGraph"><a href="#DroidGraph" class="headerlink" title="DroidGraph"></a>DroidGraph</h2><p>​    <strong>DroidGraph</strong>是一个利用语义特征检测Android恶意软件的系统。图1(上)描述了DroidGraph如何提取Android恶意软件的语义。</p><p>​    在第一步，我们使用众所周知的<strong>重新打包工具APKtool从APK文件中提取smali代码</strong>。注意，smali代码形成了一种语法上接近纯源代码的解释性语言，因此构造原始代码的控制流是很有用的。</p><p>​    在第二步中，我们按照APK层次结构为每个smali代码构建控制流的API调用图。API调用图可以表示为一个有向图$G = (V, E)$，其中$V$是API调用的集合，$E$是<strong>API调用的调用关系集</strong>，$E={(v_i, v_j)|v_i,  v_j∈V}$，其中vi表示调用者，$v_j,v_i$表示<strong>被调用者</strong>。API调用图还表示每个方法、类和包的行为。</p><p>​    <strong>DroidGraph</strong>的主要新颖之处在于我们<strong>如何使用API调用来表示Android恶意软件的语义</strong>。由于为Android开发者定义了成千上万的API调用，它带来了巨大的图表。分析包含数千个API节点的原始API调用图并不是一种有效的方法，它可能不允许我们清楚地理解图的语义。此外，考虑到我们需要比较图来判断Android恶意软件的情况，图的同构通常被称为np完全问题。</p><p>​    在此驱动下，我们最终将API调用图转换为语义图，每个API调用根据其语义被替换为语义节点。每个API调用被划分为<strong>34个对象</strong>，其中的对象是<strong>进程、网络、帐户等</strong>。这些对象再次被分为<strong>4种行为</strong>，如<strong>打开、读取、写入和关闭</strong>。因此，<strong>数千个API调用</strong>被转换为<strong>总共136个相同的语义节点</strong>。我们把这种<strong>转换称为语义抽象</strong>。图1(底部)展示了一个抽象的简单示例，其中包含一个试图窃取SMS消息的真正恶意活动。通过语义抽象步骤，最终得到每个APK的语义图。</p><p>​    语义图为我们提供了以下三个好处。</p><ol><li><strong>抗重新打包</strong>：语义图在每个层次上都有表示，因此，即使攻击者使用重新打包，DroidGraph也会确定哪些模块或类含有恶意代码。</li><li><strong>抗混淆</strong>：语义图考虑API调用的语义，因此，如果攻击者试图替换API调用，或放置一些垃圾代码，甚至混淆代码本身，DroidGraph提取相同的语义图。</li><li><strong>时间优势</strong>：DroidGraph将图比较开销降低到一个常数时间。与具有多项式时间开销的朴素调用图相比，这在实用性方面是一个很大的优势。</li></ol><p>​    对于Android恶意软件的检测，DroidGraph需要从现有的已知Android恶意软件中提取语义特征。为此，我们采用<strong>图挖掘方法</strong>，从只包含<strong>Android恶意软件家族中常见的恶意语义图而非普通应用程序的图池中选择签名图</strong>。DroidGraph使用特征图来判断测试应用程序是否包含恶意语义行为。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>​    为了评估<strong>DroidGraph</strong>的性能，我们对真实的Android应用进行了实验，其中包括260个来自Contagio手机网站的Android恶意软件，以及3623个来自第三方Android  market和谷歌play  store的良性应用。</p><p>​    在实验中，我们从良性应用中得到16080张图，从Android恶意样本中得到1863张图。通过应用图挖掘，最终得到<strong>335个只出现在Android恶意样本中的唯一图</strong>。图2为Android恶意软件的图覆盖率和累计检测率。单个图的最大覆盖率为85，这意味着单个图可以检测1/3的恶意样本。335个语义行为图的检测准确率可达87%，而仅用40个语义行为图就能得到相同的检测结果。良性应用没有假阳性。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    DroidGraph是对付复杂的Android恶意软件的有效手段。为了进一步的研究，我们计划在不同层次上通过图匹配来提高检测的准确性，并分析找出最有效的语义特征和策略。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/11/hello-world/"/>
    <url>/2021/11/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
